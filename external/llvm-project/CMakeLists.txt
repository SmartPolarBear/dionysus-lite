cmake_minimum_required(VERSION 3.16 FATAL_ERROR)

include(ExternalProject)

set(NEWLIB_INC_PATH ${INSTALL_PREFIX}/include)
set(NEWLIB_USER_INC_PATH ${USER_INSTALL_PREFIX}/include)
set(LIBCXX_INC_PATH ${LIBCXX_SRC_DIR}/include)

set(AR /usr/bin/ar)
set(CLANG /usr/bin/clang)
set(CLANGXX /usr/bin/clang++)
set(LDLLD /usr/bin/ld.lld13)
set(RANLIB /usr/bin/ranlib)

#libcxxabi
set(LIBCXXABI_THREADING_INCLUDE ${CMAKE_SOURCE_DIR}/kern/libs/cxxrt_support/include)
#set(LIBCXXABI_THREADING_FLAGS "")
set(LIBCXXABI_THREADING_FLAGS "-DHAS_THREAD_LOCAL -D_LIBCXXABI_HAS_NO_THREADS -D_LIBCPP_HAS_THREAD_API_EXTERNAL -D_LIBCPP_HAS_THREAD_LIBRARY_EXTERNAL -I${LIBCXXABI_THREADING_INCLUDE}")

set(LIBCXXABI_CFLAGS "-ffreestanding -g -nostdlibinc -msoft-float -mno-sse -mno-avx -I${NEWLIB_INC_PATH}  -fdeclspec -mcmodel=large -D__ELF__ -U__APPLE__ -D_LIBCPP_STD_VER=20 -D_LDBL_EQ_DBL -D_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION ${LIBCXXABI_THREADING_FLAGS}")

list(APPEND LIBCXXABI_CMAKE_ARGS
        -DCMAKE_AR=${AR}
        -D_LIBCPP_STD_VER=20
        -DCMAKE_CXX_COMPILER=${CLANGXX}
        -DCMAKE_CXX_FLAGS=${LIBCXXABI_CFLAGS}
        -DCMAKE_C_COMPILER=${CLANG}
        -DCMAKE_C_FLAGS=${LIBCXXABI_CFLAGS}
        -DCMAKE_LINKER=${LDLLD}
        -DCMAKE_RANLIB=${RANLIB}
        -DCMAKE_SHARED_LINKER_FLAGS="-L${INSTALL_PREFIX}/lib"
        -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY
        -DLIBCXXABI_LIBCXX_INCLUDES=${LIBCXX_INC_PATH}
        -DLIBCXXABI_ENABLE_THREADS=ON
        -DLIBCXXABI_BUILD_EXTERNAL_THREAD_LIBRARY=OFF
        -DLIBCXXABI_HAS_EXTERNAL_THREAD_API=ON
        -DLIBCXXABI_ENABLE_EXCEPTIONS=OFF
        -DLIBCXXABI_TARGET_TRIPLE=x86_64-unknown-none-elf
        -DLIBCXXABI_ENABLE_SHARED=OFF
        -DLIBCXXABI_ENABLE_STATIC=ON
        -DLIBCXXABI_LIBCXX_PATH=${LIBCXX_SRC_DIR}
        -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}
        -DLIBCXXABI_USE_LLVM_UNWINDER=ON
        -DLIBCXXABI_ENABLE_ASSERTIONS=OFF
        -DLIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS=OFF
        -DLIBCXXABI_BAREMETAL=ON
        -DLLVM_PATH=${LLVM_PROJ_SRC_DIR}/llvm
        )

ExternalProject_Add(
        libcxxabi_build
        PREFIX ${INSTALL_PREFIX}
        SOURCE_DIR ${LIBCXXABI_SRC_DIR}
        CMAKE_ARGS ${LIBCXXABI_CMAKE_ARGS}
)

add_dependencies(libcxxabi_build newlib_build)

#libcxx
set(LIBCXX_THREADING_INCLUDE ${CMAKE_SOURCE_DIR}/kern/libs/cxxrt_support/include)
#set(LIBCXX_THREADING_FLAGS "-DCLOCK_MONOTONIC")
set(LIBCXX_HACK_HEADERS " -D_LIBCPP_THREAD" )
set(LIBCXX_THREADING_FLAGS "-D_LIBCPP_HAS_NO_THREADS -I${LIBCXX_THREADING_INCLUDE} ${LIBCXX_HACK_HEADERS} -D_LIBCPP_HAS_NO_TREE_BARRIER -DCLOCK_MONOTONIC -D_LIBCPP_HAS_TRIVIAL_CONDVAR_DESTRUCTION -D_LIBCPP_DISABLE_EXTERN_TEMPLATE -D_LIBCPP_HAS_NO_PLATFORM_WAIT ")

set(LIBCXX_CXXFLAGS "-fno-exceptions -ffreestanding -g -nostdlibinc -mcmodel=large -msoft-float -mno-avx -v -I${INSTALL_PREFIX}/src/libcxx_build-build/include/c++/v1/ -I${NEWLIB_INC_PATH} -D__ELF__ -D_LIBUNWIND_IS_BAREMETAL=1 -D_LDBL_EQ_DBL -U__APPLE__ -D_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION  -D_LIBCPP_STD_VER=20 -D_GNU_SOURCE -D_POSIX_TIMERS ${LIBCXX_THREADING_FLAGS}")
set(LIBCXX_CFLAGS "-fno-exceptions -ffreestanding -g -nostdlibinc -mcmodel=large -msoft-float -mno-avx -fdeclspec -I${INSTALL_PREFIX}/src/libcxx_build-build/include/c++/v1/  -I${NEWLIB_INC_PATH}  -D__ELF__ -D_LIBUNWIND_IS_BAREMETAL=1 -D_LDBL_EQ_DBL -U__APPLE__ -D_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION -D_LIBCPP_STD_VER=20 -D_GNU_SOURCE -D_POSIX_TIMERS ${LIBCXX_THREADING_FLAGS}")

list(APPEND LIBCXX_CMAKE_ARGS
        -DCMAKE_AR=${AR}
        -D_LIBCPP_STD_VER=20
        -DCMAKE_CXX_COMPILER=${CLANGXX}
        -DCMAKE_CXX_COMPILER_TARGET=x86_64-unknown-none-elf
        -DCMAKE_CXX_FLAGS=${LIBCXX_CXXFLAGS}
        -DCMAKE_C_COMPILER=${CLANG}
        -DCMAKE_C_FLAGS=${LIBCXX_CFLAGS}
        -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}
        -DCMAKE_LINKER=${LDLLD}
        -DCMAKE_RANLIB=${RANLIB}
        -DCMAKE_SHARED_LINKER_FLAGS=-L${INSTALL_PREFIX}/lib
        -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY
        -DLIBCXX_CXX_ABI=libcxxabi
        -DLIBCXX_CXX_ABI_INCLUDE_PATHS=${LLVM_PROJ_SRC_DIR}/libcxxabi/include
        -DLIBCXX_CXX_ABI_LIBRARY_PATH=${LLVM_PROJ_SRC_DIR}/libcxxabi/lib
        -DLIBCXX_ENABLE_FILESYSTEM=OFF
        -DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=OFF
        -DLIBCXX_ENABLE_RTTI=OFF
        -DLIBCXX_ENABLE_SHARED=OFF
        -DLIBCXX_ENABLE_STATIC=ON
        -DLIBCXX_ENABLE_THREADS=ON
        -DLIBCXX_ENABLE_MONOTONIC_CLOCK=ON
        -DLIBCXX_BUILD_EXTERNAL_THREAD_LIBRARY=OFF
        -DLIBCXX_HAS_EXTERNAL_THREAD_API=OFF
        -DLIBCXX_ENABLE_EXCEPTIONS=OFF
        -DLIBCXX_TYPEINFO_COMPARISON_IMPLEMENTATION=default
        -DLLVM_PATH=${LLVM_PROJ_SRC_DIR}/llvm
        )


ExternalProject_Add(
        libcxx_build
        PREFIX ${INSTALL_PREFIX}
        SOURCE_DIR ${LIBCXX_SRC_DIR}
        CMAKE_ARGS ${LIBCXX_CMAKE_ARGS}
)

add_dependencies(libcxx_build libcxxabi_build newlib_build)

#libcxxabi user

set(LIBCXXABI_CFLAGS_USER "-g -nostdlibinc -msoft-float -mno-sse -mno-avx -I${NEWLIB_USER_INC_PATH} -fdeclspec -mcmodel=large -D__ELF__ -U__APPLE__ -D_LDBL_EQ_DBL -D_LIBCPP_HAS_NO_THREADS -D_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION")

list(APPEND LIBCXXABI_CMAKE_ARGS_USER
        -DCMAKE_AR=${AR}
        -DCMAKE_CXX_COMPILER=${CLANGXX}
        -DCMAKE_CXX_FLAGS=${LIBCXXABI_CFLAGS_USER}
        -DCMAKE_C_COMPILER=${CLANG}
        -DCMAKE_C_FLAGS=${LIBCXXABI_CFLAGS_USER}
        -DCMAKE_LINKER=${LDLLD}
        -DCMAKE_RANLIB=${RANLIB}
        -DCMAKE_SHARED_LINKER_FLAGS="-L${USER_INSTALL_PREFIX}/lib"
        -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY
        -DLIBCXXABI_LIBCXX_INCLUDES=${LIBCXX_INC_PATH}
        -DLIBCXXABI_ENABLE_THREADS=OFF
        -DLIBCXXABI_ENABLE_EXCEPTIONS=OFF
        -DLIBCXXABI_TARGET_TRIPLE=x86_64-unknown-none-elf
        -DLIBCXXABI_ENABLE_SHARED=OFF
        -DLIBCXXABI_ENABLE_STATIC=ON
        -DLIBCXXABI_LIBCXX_PATH=${LIBCXX_SRC_DIR}
        -DCMAKE_INSTALL_PREFIX=${USER_INSTALL_PREFIX}
        -DLIBCXXABI_USE_LLVM_UNWINDER=ON
        -DLIBCXXABI_ENABLE_ASSERTIONS=OFF
        -DLIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS=OFF
        -DLIBCXXABI_BAREMETAL=ON
        -DLLVM_PATH=${LLVM_PROJ_SRC_DIR}/llvm
        )

ExternalProject_Add(
        libcxxabi_build_user
        PREFIX ${USER_INSTALL_PREFIX}
        SOURCE_DIR ${LIBCXXABI_SRC_DIR}
        CMAKE_ARGS ${LIBCXXABI_CMAKE_ARGS_USER}
)

add_dependencies(libcxxabi_build_user newlib_build_user)


#libcxx user

set(LIBCXX_CXXFLAGS_USER "-g -nostdlibinc -msoft-float -mno-avx -v -I${USER_INSTALL_PREFIX}/src/libcxx_build_user-build/include/c++/v1/ -I${NEWLIB_USER_INC_PATH} -D__ELF__ -D_LIBUNWIND_IS_BAREMETAL=1 -D_LDBL_EQ_DBL -U__APPLE__ -D_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION -D_GNU_SOURCE -D_POSIX_TIMERS -mcmodel=large")
set(LIBCXX_CFLAGS_USER "-g -nostdlibinc -msoft-float -mno-avx  -I${USER_INSTALL_PREFIX}/src/libcxx_build_user-build/include/c++/v1/  -I${NEWLIB_USER_INC_PATH} -fdeclspec -D__ELF__ -D_LIBUNWIND_IS_BAREMETAL=1 -D_LDBL_EQ_DBL -U__APPLE__ -D_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION -D_GNU_SOURCE -D_POSIX_TIMERS -mcmodel=large")

list(APPEND LIBCXX_CMAKE_ARGS_USER
        -DCMAKE_AR=${AR}
        -DCMAKE_CXX_COMPILER=${CLANGXX}
        -DCMAKE_CXX_COMPILER_TARGET=x86_64-unknown-none-elf
        -DCMAKE_CXX_FLAGS=${LIBCXX_CXXFLAGS_USER}
        -DCMAKE_C_COMPILER=${CLANG}
        -DCMAKE_C_FLAGS=${LIBCXX_CFLAGS_USER}
        -DCMAKE_INSTALL_PREFIX=${USER_INSTALL_PREFIX}
        -DCMAKE_LINKER=${LDLLD}
        -DCMAKE_RANLIB=${RANLIB}
        -DCMAKE_SHARED_LINKER_FLAGS=-L${USER_INSTALL_PREFIX}/lib
        -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY
        -DLIBCXX_CXX_ABI=libcxxabi
        -DLIBCXX_CXX_ABI_INCLUDE_PATHS=${LLVM_PROJ_SRC_DIR}/libcxxabi/include
        -DLIBCXX_CXX_ABI_LIBRARY_PATH=${LLVM_PROJ_SRC_DIR}/libcxxabi/lib
        -DLIBCXX_ENABLE_FILESYSTEM=False
        -DLIBCXX_ENABLE_MONOTONIC_CLOCK=False
        -DLIBCXX_ENABLE_RTTI=False
        -DLIBCXX_ENABLE_SHARED=False
        -DLIBCXX_ENABLE_STATIC=True
        -DLIBCXX_ENABLE_THREADS=False
        -DLIBCXX_ENABLE_EXCEPTIONS=False
        -DLLVM_PATH=${LLVM_PROJ_SRC_DIR}/llvm
        )


ExternalProject_Add(
        libcxx_build_user
        PREFIX ${USER_INSTALL_PREFIX}
        SOURCE_DIR ${LIBCXX_SRC_DIR}
        CMAKE_ARGS ${LIBCXX_CMAKE_ARGS_USER}
)

add_dependencies(libcxx_build_user libcxxabi_build_user newlib_build_user)